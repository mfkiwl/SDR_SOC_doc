
DDS_fv2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004f6  0000056a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001a94  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dc9  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00002dc9  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 58 01 	call	0x2b0	; 0x2b0 <main>
  64:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <dds_Init>:
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	8b e3       	ldi	r24, 0x3B	; 59
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	2b e3       	ldi	r18, 0x3B	; 59
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	f9 01       	movw	r30, r18
  7e:	20 81       	ld	r18, Z
  80:	27 7f       	andi	r18, 0xF7	; 247
  82:	fc 01       	movw	r30, r24
  84:	20 83       	st	Z, r18
  86:	8b e3       	ldi	r24, 0x3B	; 59
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	2b e3       	ldi	r18, 0x3B	; 59
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	f9 01       	movw	r30, r18
  90:	20 81       	ld	r18, Z
  92:	2e 7f       	andi	r18, 0xFE	; 254
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
  98:	8b e3       	ldi	r24, 0x3B	; 59
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	2b e3       	ldi	r18, 0x3B	; 59
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	f9 01       	movw	r30, r18
  a2:	20 81       	ld	r18, Z
  a4:	2d 7f       	andi	r18, 0xFD	; 253
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
  aa:	8b e3       	ldi	r24, 0x3B	; 59
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	2b e3       	ldi	r18, 0x3B	; 59
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	20 81       	ld	r18, Z
  b6:	2b 7f       	andi	r18, 0xFB	; 251
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
  bc:	8b e3       	ldi	r24, 0x3B	; 59
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	2b e3       	ldi	r18, 0x3B	; 59
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	f9 01       	movw	r30, r18
  c6:	20 81       	ld	r18, Z
  c8:	22 60       	ori	r18, 0x02	; 2
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
  ce:	8b e3       	ldi	r24, 0x3B	; 59
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	2b e3       	ldi	r18, 0x3B	; 59
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	20 81       	ld	r18, Z
  da:	2d 7f       	andi	r18, 0xFD	; 253
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
  e0:	8b e3       	ldi	r24, 0x3B	; 59
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	2b e3       	ldi	r18, 0x3B	; 59
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	f9 01       	movw	r30, r18
  ea:	20 81       	ld	r18, Z
  ec:	21 60       	ori	r18, 0x01	; 1
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
  f2:	8b e3       	ldi	r24, 0x3B	; 59
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	2b e3       	ldi	r18, 0x3B	; 59
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	f9 01       	movw	r30, r18
  fc:	20 81       	ld	r18, Z
  fe:	2e 7f       	andi	r18, 0xFE	; 254
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <dds_Reset>:
	FQ_UD1;
	FQ_UD0;
}

void dds_Reset(void)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	1f 92       	push	r1
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	for (i=0; i<5; i++)
 114:	19 82       	std	Y+1, r1	; 0x01
 116:	0c c0       	rjmp	.+24     	; 0x130 <dds_Reset+0x26>
		RESET1;
 118:	8b e3       	ldi	r24, 0x3B	; 59
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	2b e3       	ldi	r18, 0x3B	; 59
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	28 60       	ori	r18, 0x08	; 8
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
}

void dds_Reset(void)
{
	uint8_t i;
	for (i=0; i<5; i++)
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	8f 5f       	subi	r24, 0xFF	; 255
 12e:	89 83       	std	Y+1, r24	; 0x01
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	85 30       	cpi	r24, 0x05	; 5
 134:	88 f3       	brcs	.-30     	; 0x118 <dds_Reset+0xe>
		RESET1;

	RESET0;
 136:	8b e3       	ldi	r24, 0x3B	; 59
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	2b e3       	ldi	r18, 0x3B	; 59
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	f9 01       	movw	r30, r18
 140:	20 81       	ld	r18, Z
 142:	27 7f       	andi	r18, 0xF7	; 247
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
}
 148:	0f 90       	pop	r0
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <dds_SendBit>:

void dds_SendBit(uint8_t bit)
{
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	1f 92       	push	r1
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	89 83       	std	Y+1, r24	; 0x01
	(bit) ? LOAD1 : LOAD0;
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	88 23       	and	r24, r24
 160:	51 f0       	breq	.+20     	; 0x176 <dds_SendBit+0x26>
 162:	8b e3       	ldi	r24, 0x3B	; 59
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	2b e3       	ldi	r18, 0x3B	; 59
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	24 60       	ori	r18, 0x04	; 4
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
 174:	09 c0       	rjmp	.+18     	; 0x188 <dds_SendBit+0x38>
 176:	8b e3       	ldi	r24, 0x3B	; 59
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	2b e3       	ldi	r18, 0x3B	; 59
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	f9 01       	movw	r30, r18
 180:	20 81       	ld	r18, Z
 182:	2b 7f       	andi	r18, 0xFB	; 251
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
	W_CLK1;
 188:	8b e3       	ldi	r24, 0x3B	; 59
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	2b e3       	ldi	r18, 0x3B	; 59
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	22 60       	ori	r18, 0x02	; 2
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
	W_CLK0;
 19a:	8b e3       	ldi	r24, 0x3B	; 59
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	2b e3       	ldi	r18, 0x3B	; 59
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	f9 01       	movw	r30, r18
 1a4:	20 81       	ld	r18, Z
 1a6:	2d 7f       	andi	r18, 0xFD	; 253
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
}
 1ac:	0f 90       	pop	r0
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <dds_SetFreq>:

void dds_SetFreq(uint32_t phase)
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <dds_SetFreq+0x6>
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <dds_SetFreq+0x8>
 1bc:	1f 92       	push	r1
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	6a 83       	std	Y+2, r22	; 0x02
 1c4:	7b 83       	std	Y+3, r23	; 0x03
 1c6:	8c 83       	std	Y+4, r24	; 0x04
 1c8:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t i;
	for (i=0; i<32; i++)
 1ca:	19 82       	std	Y+1, r1	; 0x01
 1cc:	14 c0       	rjmp	.+40     	; 0x1f6 <dds_SetFreq+0x42>
		dds_SendBit((phase>>i) & 1);
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	8a 81       	ldd	r24, Y+2	; 0x02
 1d6:	9b 81       	ldd	r25, Y+3	; 0x03
 1d8:	ac 81       	ldd	r26, Y+4	; 0x04
 1da:	bd 81       	ldd	r27, Y+5	; 0x05
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <dds_SetFreq+0x32>
 1de:	b6 95       	lsr	r27
 1e0:	a7 95       	ror	r26
 1e2:	97 95       	ror	r25
 1e4:	87 95       	ror	r24
 1e6:	2a 95       	dec	r18
 1e8:	d2 f7       	brpl	.-12     	; 0x1de <dds_SetFreq+0x2a>
 1ea:	81 70       	andi	r24, 0x01	; 1
 1ec:	0e 94 a8 00 	call	0x150	; 0x150 <dds_SendBit>
}

void dds_SetFreq(uint32_t phase)
{
	uint8_t i;
	for (i=0; i<32; i++)
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	8f 5f       	subi	r24, 0xFF	; 255
 1f4:	89 83       	std	Y+1, r24	; 0x01
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	80 32       	cpi	r24, 0x20	; 32
 1fa:	48 f3       	brcs	.-46     	; 0x1ce <dds_SetFreq+0x1a>
		dds_SendBit((phase>>i) & 1);

	for (i=0; i<8; i++)
 1fc:	19 82       	std	Y+1, r1	; 0x01
 1fe:	06 c0       	rjmp	.+12     	; 0x20c <dds_SetFreq+0x58>
		dds_SendBit(0);
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 a8 00 	call	0x150	; 0x150 <dds_SendBit>
{
	uint8_t i;
	for (i=0; i<32; i++)
		dds_SendBit((phase>>i) & 1);

	for (i=0; i<8; i++)
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	89 83       	std	Y+1, r24	; 0x01
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	88 30       	cpi	r24, 0x08	; 8
 210:	b8 f3       	brcs	.-18     	; 0x200 <dds_SetFreq+0x4c>
		dds_SendBit(0);

	FQ_UD1;
 212:	8b e3       	ldi	r24, 0x3B	; 59
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	2b e3       	ldi	r18, 0x3B	; 59
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	f9 01       	movw	r30, r18
 21c:	20 81       	ld	r18, Z
 21e:	21 60       	ori	r18, 0x01	; 1
 220:	fc 01       	movw	r30, r24
 222:	20 83       	st	Z, r18
	FQ_UD0;
 224:	8b e3       	ldi	r24, 0x3B	; 59
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	2b e3       	ldi	r18, 0x3B	; 59
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	f9 01       	movw	r30, r18
 22e:	20 81       	ld	r18, Z
 230:	2e 7f       	andi	r18, 0xFE	; 254
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
}
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <dds_Phase>:

uint32_t dds_Phase(double fout) //output freguenci in MHz
{
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	28 97       	sbiw	r28, 0x08	; 8
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	de bf       	out	0x3e, r29	; 62
 256:	0f be       	out	0x3f, r0	; 63
 258:	cd bf       	out	0x3d, r28	; 61
 25a:	69 83       	std	Y+1, r22	; 0x01
 25c:	7a 83       	std	Y+2, r23	; 0x02
 25e:	8b 83       	std	Y+3, r24	; 0x03
 260:	9c 83       	std	Y+4, r25	; 0x04
	return (uint32_t)(fout*0xFFFFFFFF)/FIN;
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	40 e8       	ldi	r20, 0x80	; 128
 268:	5f e4       	ldi	r21, 0x4F	; 79
 26a:	69 81       	ldd	r22, Y+1	; 0x01
 26c:	7a 81       	ldd	r23, Y+2	; 0x02
 26e:	8b 81       	ldd	r24, Y+3	; 0x03
 270:	9c 81       	ldd	r25, Y+4	; 0x04
 272:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__mulsf3>
 276:	dc 01       	movw	r26, r24
 278:	cb 01       	movw	r24, r22
 27a:	bc 01       	movw	r22, r24
 27c:	cd 01       	movw	r24, r26
 27e:	0e 94 99 01 	call	0x332	; 0x332 <__fixunssfsi>
 282:	dc 01       	movw	r26, r24
 284:	cb 01       	movw	r24, r22
 286:	24 e6       	ldi	r18, 0x64	; 100
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	bc 01       	movw	r22, r24
 290:	cd 01       	movw	r24, r26
 292:	0e 94 77 01 	call	0x2ee	; 0x2ee <__udivmodsi4>
 296:	da 01       	movw	r26, r20
 298:	c9 01       	movw	r24, r18
}
 29a:	bc 01       	movw	r22, r24
 29c:	cd 01       	movw	r24, r26
 29e:	28 96       	adiw	r28, 0x08	; 8
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <main>:

int main(void)
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;	// L in H out
 2b8:	8a e3       	ldi	r24, 0x3A	; 58
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
    PORTA = 0x08;	// reset in L
 2c2:	8b e3       	ldi	r24, 0x3B	; 59
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	28 e0       	ldi	r18, 0x08	; 8
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18

    dds_Reset();
 2cc:	0e 94 85 00 	call	0x10a	; 0x10a <dds_Reset>
	dds_Init();
 2d0:	0e 94 36 00 	call	0x6c	; 0x6c <dds_Init>
	dds_SetFreq(dds_Phase(1));
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	80 e8       	ldi	r24, 0x80	; 128
 2da:	9f e3       	ldi	r25, 0x3F	; 63
 2dc:	0e 94 23 01 	call	0x246	; 0x246 <dds_Phase>
 2e0:	dc 01       	movw	r26, r24
 2e2:	cb 01       	movw	r24, r22
 2e4:	bc 01       	movw	r22, r24
 2e6:	cd 01       	movw	r24, r26
 2e8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dds_SetFreq>

    while(1)
    {
    	;
    }
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <main+0x3c>

000002ee <__udivmodsi4>:
 2ee:	a1 e2       	ldi	r26, 0x21	; 33
 2f0:	1a 2e       	mov	r1, r26
 2f2:	aa 1b       	sub	r26, r26
 2f4:	bb 1b       	sub	r27, r27
 2f6:	fd 01       	movw	r30, r26
 2f8:	0d c0       	rjmp	.+26     	; 0x314 <__udivmodsi4_ep>

000002fa <__udivmodsi4_loop>:
 2fa:	aa 1f       	adc	r26, r26
 2fc:	bb 1f       	adc	r27, r27
 2fe:	ee 1f       	adc	r30, r30
 300:	ff 1f       	adc	r31, r31
 302:	a2 17       	cp	r26, r18
 304:	b3 07       	cpc	r27, r19
 306:	e4 07       	cpc	r30, r20
 308:	f5 07       	cpc	r31, r21
 30a:	20 f0       	brcs	.+8      	; 0x314 <__udivmodsi4_ep>
 30c:	a2 1b       	sub	r26, r18
 30e:	b3 0b       	sbc	r27, r19
 310:	e4 0b       	sbc	r30, r20
 312:	f5 0b       	sbc	r31, r21

00000314 <__udivmodsi4_ep>:
 314:	66 1f       	adc	r22, r22
 316:	77 1f       	adc	r23, r23
 318:	88 1f       	adc	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	1a 94       	dec	r1
 31e:	69 f7       	brne	.-38     	; 0x2fa <__udivmodsi4_loop>
 320:	60 95       	com	r22
 322:	70 95       	com	r23
 324:	80 95       	com	r24
 326:	90 95       	com	r25
 328:	9b 01       	movw	r18, r22
 32a:	ac 01       	movw	r20, r24
 32c:	bd 01       	movw	r22, r26
 32e:	cf 01       	movw	r24, r30
 330:	08 95       	ret

00000332 <__fixunssfsi>:
 332:	33 d0       	rcall	.+102    	; 0x39a <__fp_splitA>
 334:	88 f0       	brcs	.+34     	; 0x358 <__fixunssfsi+0x26>
 336:	9f 57       	subi	r25, 0x7F	; 127
 338:	90 f0       	brcs	.+36     	; 0x35e <__fixunssfsi+0x2c>
 33a:	b9 2f       	mov	r27, r25
 33c:	99 27       	eor	r25, r25
 33e:	b7 51       	subi	r27, 0x17	; 23
 340:	a0 f0       	brcs	.+40     	; 0x36a <__fixunssfsi+0x38>
 342:	d1 f0       	breq	.+52     	; 0x378 <__fixunssfsi+0x46>
 344:	66 0f       	add	r22, r22
 346:	77 1f       	adc	r23, r23
 348:	88 1f       	adc	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	1a f0       	brmi	.+6      	; 0x354 <__fixunssfsi+0x22>
 34e:	ba 95       	dec	r27
 350:	c9 f7       	brne	.-14     	; 0x344 <__fixunssfsi+0x12>
 352:	12 c0       	rjmp	.+36     	; 0x378 <__fixunssfsi+0x46>
 354:	b1 30       	cpi	r27, 0x01	; 1
 356:	81 f0       	breq	.+32     	; 0x378 <__fixunssfsi+0x46>
 358:	3a d0       	rcall	.+116    	; 0x3ce <__fp_zero>
 35a:	b1 e0       	ldi	r27, 0x01	; 1
 35c:	08 95       	ret
 35e:	37 c0       	rjmp	.+110    	; 0x3ce <__fp_zero>
 360:	67 2f       	mov	r22, r23
 362:	78 2f       	mov	r23, r24
 364:	88 27       	eor	r24, r24
 366:	b8 5f       	subi	r27, 0xF8	; 248
 368:	39 f0       	breq	.+14     	; 0x378 <__fixunssfsi+0x46>
 36a:	b9 3f       	cpi	r27, 0xF9	; 249
 36c:	cc f3       	brlt	.-14     	; 0x360 <__fixunssfsi+0x2e>
 36e:	86 95       	lsr	r24
 370:	77 95       	ror	r23
 372:	67 95       	ror	r22
 374:	b3 95       	inc	r27
 376:	d9 f7       	brne	.-10     	; 0x36e <__fixunssfsi+0x3c>
 378:	3e f4       	brtc	.+14     	; 0x388 <__fixunssfsi+0x56>
 37a:	90 95       	com	r25
 37c:	80 95       	com	r24
 37e:	70 95       	com	r23
 380:	61 95       	neg	r22
 382:	7f 4f       	sbci	r23, 0xFF	; 255
 384:	8f 4f       	sbci	r24, 0xFF	; 255
 386:	9f 4f       	sbci	r25, 0xFF	; 255
 388:	08 95       	ret

0000038a <__fp_split3>:
 38a:	57 fd       	sbrc	r21, 7
 38c:	90 58       	subi	r25, 0x80	; 128
 38e:	44 0f       	add	r20, r20
 390:	55 1f       	adc	r21, r21
 392:	59 f0       	breq	.+22     	; 0x3aa <__fp_splitA+0x10>
 394:	5f 3f       	cpi	r21, 0xFF	; 255
 396:	71 f0       	breq	.+28     	; 0x3b4 <__fp_splitA+0x1a>
 398:	47 95       	ror	r20

0000039a <__fp_splitA>:
 39a:	88 0f       	add	r24, r24
 39c:	97 fb       	bst	r25, 7
 39e:	99 1f       	adc	r25, r25
 3a0:	61 f0       	breq	.+24     	; 0x3ba <__fp_splitA+0x20>
 3a2:	9f 3f       	cpi	r25, 0xFF	; 255
 3a4:	79 f0       	breq	.+30     	; 0x3c4 <__fp_splitA+0x2a>
 3a6:	87 95       	ror	r24
 3a8:	08 95       	ret
 3aa:	12 16       	cp	r1, r18
 3ac:	13 06       	cpc	r1, r19
 3ae:	14 06       	cpc	r1, r20
 3b0:	55 1f       	adc	r21, r21
 3b2:	f2 cf       	rjmp	.-28     	; 0x398 <__fp_split3+0xe>
 3b4:	46 95       	lsr	r20
 3b6:	f1 df       	rcall	.-30     	; 0x39a <__fp_splitA>
 3b8:	08 c0       	rjmp	.+16     	; 0x3ca <__fp_splitA+0x30>
 3ba:	16 16       	cp	r1, r22
 3bc:	17 06       	cpc	r1, r23
 3be:	18 06       	cpc	r1, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	f1 cf       	rjmp	.-30     	; 0x3a6 <__fp_splitA+0xc>
 3c4:	86 95       	lsr	r24
 3c6:	71 05       	cpc	r23, r1
 3c8:	61 05       	cpc	r22, r1
 3ca:	08 94       	sec
 3cc:	08 95       	ret

000003ce <__fp_zero>:
 3ce:	e8 94       	clt

000003d0 <__fp_szero>:
 3d0:	bb 27       	eor	r27, r27
 3d2:	66 27       	eor	r22, r22
 3d4:	77 27       	eor	r23, r23
 3d6:	cb 01       	movw	r24, r22
 3d8:	97 f9       	bld	r25, 7
 3da:	08 95       	ret

000003dc <__mulsf3>:
 3dc:	0b d0       	rcall	.+22     	; 0x3f4 <__mulsf3x>
 3de:	78 c0       	rjmp	.+240    	; 0x4d0 <__fp_round>
 3e0:	69 d0       	rcall	.+210    	; 0x4b4 <__fp_pscA>
 3e2:	28 f0       	brcs	.+10     	; 0x3ee <__mulsf3+0x12>
 3e4:	6e d0       	rcall	.+220    	; 0x4c2 <__fp_pscB>
 3e6:	18 f0       	brcs	.+6      	; 0x3ee <__mulsf3+0x12>
 3e8:	95 23       	and	r25, r21
 3ea:	09 f0       	breq	.+2      	; 0x3ee <__mulsf3+0x12>
 3ec:	5a c0       	rjmp	.+180    	; 0x4a2 <__fp_inf>
 3ee:	5f c0       	rjmp	.+190    	; 0x4ae <__fp_nan>
 3f0:	11 24       	eor	r1, r1
 3f2:	ee cf       	rjmp	.-36     	; 0x3d0 <__fp_szero>

000003f4 <__mulsf3x>:
 3f4:	ca df       	rcall	.-108    	; 0x38a <__fp_split3>
 3f6:	a0 f3       	brcs	.-24     	; 0x3e0 <__mulsf3+0x4>

000003f8 <__mulsf3_pse>:
 3f8:	95 9f       	mul	r25, r21
 3fa:	d1 f3       	breq	.-12     	; 0x3f0 <__mulsf3+0x14>
 3fc:	95 0f       	add	r25, r21
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	55 1f       	adc	r21, r21
 402:	62 9f       	mul	r22, r18
 404:	f0 01       	movw	r30, r0
 406:	72 9f       	mul	r23, r18
 408:	bb 27       	eor	r27, r27
 40a:	f0 0d       	add	r31, r0
 40c:	b1 1d       	adc	r27, r1
 40e:	63 9f       	mul	r22, r19
 410:	aa 27       	eor	r26, r26
 412:	f0 0d       	add	r31, r0
 414:	b1 1d       	adc	r27, r1
 416:	aa 1f       	adc	r26, r26
 418:	64 9f       	mul	r22, r20
 41a:	66 27       	eor	r22, r22
 41c:	b0 0d       	add	r27, r0
 41e:	a1 1d       	adc	r26, r1
 420:	66 1f       	adc	r22, r22
 422:	82 9f       	mul	r24, r18
 424:	22 27       	eor	r18, r18
 426:	b0 0d       	add	r27, r0
 428:	a1 1d       	adc	r26, r1
 42a:	62 1f       	adc	r22, r18
 42c:	73 9f       	mul	r23, r19
 42e:	b0 0d       	add	r27, r0
 430:	a1 1d       	adc	r26, r1
 432:	62 1f       	adc	r22, r18
 434:	83 9f       	mul	r24, r19
 436:	a0 0d       	add	r26, r0
 438:	61 1d       	adc	r22, r1
 43a:	22 1f       	adc	r18, r18
 43c:	74 9f       	mul	r23, r20
 43e:	33 27       	eor	r19, r19
 440:	a0 0d       	add	r26, r0
 442:	61 1d       	adc	r22, r1
 444:	23 1f       	adc	r18, r19
 446:	84 9f       	mul	r24, r20
 448:	60 0d       	add	r22, r0
 44a:	21 1d       	adc	r18, r1
 44c:	82 2f       	mov	r24, r18
 44e:	76 2f       	mov	r23, r22
 450:	6a 2f       	mov	r22, r26
 452:	11 24       	eor	r1, r1
 454:	9f 57       	subi	r25, 0x7F	; 127
 456:	50 40       	sbci	r21, 0x00	; 0
 458:	8a f0       	brmi	.+34     	; 0x47c <__stack+0x1d>
 45a:	e1 f0       	breq	.+56     	; 0x494 <__stack+0x35>
 45c:	88 23       	and	r24, r24
 45e:	4a f0       	brmi	.+18     	; 0x472 <__stack+0x13>
 460:	ee 0f       	add	r30, r30
 462:	ff 1f       	adc	r31, r31
 464:	bb 1f       	adc	r27, r27
 466:	66 1f       	adc	r22, r22
 468:	77 1f       	adc	r23, r23
 46a:	88 1f       	adc	r24, r24
 46c:	91 50       	subi	r25, 0x01	; 1
 46e:	50 40       	sbci	r21, 0x00	; 0
 470:	a9 f7       	brne	.-22     	; 0x45c <__mulsf3_pse+0x64>
 472:	9e 3f       	cpi	r25, 0xFE	; 254
 474:	51 05       	cpc	r21, r1
 476:	70 f0       	brcs	.+28     	; 0x494 <__stack+0x35>
 478:	14 c0       	rjmp	.+40     	; 0x4a2 <__fp_inf>
 47a:	aa cf       	rjmp	.-172    	; 0x3d0 <__fp_szero>
 47c:	5f 3f       	cpi	r21, 0xFF	; 255
 47e:	ec f3       	brlt	.-6      	; 0x47a <__stack+0x1b>
 480:	98 3e       	cpi	r25, 0xE8	; 232
 482:	dc f3       	brlt	.-10     	; 0x47a <__stack+0x1b>
 484:	86 95       	lsr	r24
 486:	77 95       	ror	r23
 488:	67 95       	ror	r22
 48a:	b7 95       	ror	r27
 48c:	f7 95       	ror	r31
 48e:	e7 95       	ror	r30
 490:	9f 5f       	subi	r25, 0xFF	; 255
 492:	c1 f7       	brne	.-16     	; 0x484 <__stack+0x25>
 494:	fe 2b       	or	r31, r30
 496:	88 0f       	add	r24, r24
 498:	91 1d       	adc	r25, r1
 49a:	96 95       	lsr	r25
 49c:	87 95       	ror	r24
 49e:	97 f9       	bld	r25, 7
 4a0:	08 95       	ret

000004a2 <__fp_inf>:
 4a2:	97 f9       	bld	r25, 7
 4a4:	9f 67       	ori	r25, 0x7F	; 127
 4a6:	80 e8       	ldi	r24, 0x80	; 128
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	08 95       	ret

000004ae <__fp_nan>:
 4ae:	9f ef       	ldi	r25, 0xFF	; 255
 4b0:	80 ec       	ldi	r24, 0xC0	; 192
 4b2:	08 95       	ret

000004b4 <__fp_pscA>:
 4b4:	00 24       	eor	r0, r0
 4b6:	0a 94       	dec	r0
 4b8:	16 16       	cp	r1, r22
 4ba:	17 06       	cpc	r1, r23
 4bc:	18 06       	cpc	r1, r24
 4be:	09 06       	cpc	r0, r25
 4c0:	08 95       	ret

000004c2 <__fp_pscB>:
 4c2:	00 24       	eor	r0, r0
 4c4:	0a 94       	dec	r0
 4c6:	12 16       	cp	r1, r18
 4c8:	13 06       	cpc	r1, r19
 4ca:	14 06       	cpc	r1, r20
 4cc:	05 06       	cpc	r0, r21
 4ce:	08 95       	ret

000004d0 <__fp_round>:
 4d0:	09 2e       	mov	r0, r25
 4d2:	03 94       	inc	r0
 4d4:	00 0c       	add	r0, r0
 4d6:	11 f4       	brne	.+4      	; 0x4dc <__fp_round+0xc>
 4d8:	88 23       	and	r24, r24
 4da:	52 f0       	brmi	.+20     	; 0x4f0 <__fp_round+0x20>
 4dc:	bb 0f       	add	r27, r27
 4de:	40 f4       	brcc	.+16     	; 0x4f0 <__fp_round+0x20>
 4e0:	bf 2b       	or	r27, r31
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <__fp_round+0x18>
 4e4:	60 ff       	sbrs	r22, 0
 4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <__fp_round+0x20>
 4e8:	6f 5f       	subi	r22, 0xFF	; 255
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	8f 4f       	sbci	r24, 0xFF	; 255
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	08 95       	ret

000004f2 <_exit>:
 4f2:	f8 94       	cli

000004f4 <__stop_program>:
 4f4:	ff cf       	rjmp	.-2      	; 0x4f4 <__stop_program>
